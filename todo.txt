Pulblicize

* Format for README.md
* Post on github
* Post on mvnrepo
* Blog a bit

Overall
* Add more to the package doc.
* Add tests and move SomeGraph to tests

Structures

* MultiPath representation (Probably a subgraph via having)
* Concurrent Graph (Or at least Graph-With-Concurrently-Modifiable-Edges)
* Fibonacci heap

Algorithms

* Binomial heap
* Minimum spanning tree
* Dijkstra's algorithm
* Fibonacci heap
* MST with Fibonacci heap
* Dijkstra with a Fibonacci heap
* Basic betweenness and closeness
* Efficient betweenness and closeness
* Lazy Label Graph. (Single-Source graph)
* A* algorithm
* Parallel queued minimization
* Minimum spanning trees

Semirings

* Most probable Semiring
* Combined Semirings.

Figure out

* path representations on the original graph with hyperedges and multiple edges.


---

Prim's MST algorithm

Put all the verticies in a priority queue with variable key values
Initialize all the keys to O.
Pick the root and set its key to I.
While the queue is not empty
    extract the minimum edge and node
        if the node isn't in the MST
            for each node reachable from it not currently in the MST
                if some node is closer by using this node
                    replace the key with the closer value

---


